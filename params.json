{"name":"Pozi Connect","tagline":"Geospatial Data Processor","body":"# PoziConnect\r\n\r\nPoziConnect provides you with a simple interface for accessing, processing,\r\nanalysing and exporting your organisation's spatial and non-spatial data.\r\n\r\nIt can be executed from the Python source code, or it can be compiled into\r\na Windows binary release.\r\n\r\n\r\n## Running on Windows\r\n\r\n### Install Python\r\n\r\nInstall [Portable Python](http://www.portablepython.com/wiki/Download) into a\r\nsubdirectory of `vendor`. This is the only Python that PoziConnect will use -\r\nyou don't need a system install of Python. We have a tested version saved here:\r\n[Portable Python 2.7.3.2](https://s3.amazonaws.com/poziconnect/PortablePython_2.7.3.2.exe).\r\n\r\nChoose the following modules during installation:\r\n\r\n* PyWin32\r\n* Py2Exe\r\n* wxPython\r\n* PyODBC\r\n\r\nMake sure that `PYTHON_DIR` in `setenv_python.bat` correctly points to the\r\nPython `App` directory. For example:\r\n\r\n    SET PYTHON_DIR=%VENDOR%\\Portable Python 2.7.3.2\\App\r\n\r\n### Install GDAL binaries\r\n\r\nInstall [GDAL binaries](http://www.gisinternals.com/sdk/) into a subdirectory of\r\n`vendor`.\r\n\r\nYou may need to match the architecture of the binaries (32 or 64-bit) with that\r\nof the operating system on which you will run PoziConnect. We have a tested\r\n(32-bit) version saved here:\r\n[release-1600-gdal-1-9-mapserver-6-2](https://s3.amazonaws.com/poziconnect/release-1600-gdal-1-9-mapserver-6-2.zip).\r\n\r\nThe `GDAL_BASE` variable in `PoziConnect.ini` must point to the GDAL `bin`\r\ndirectory. For example:\r\n\r\n    GDAL_BASE: vendor\\release-1600-gdal-1-9-mapserver-6-2\\bin\r\n\r\n### Run it\r\n\r\nLaunch `PoziConnect.bat` to run PoziConnect from the source code.\r\n\r\n\r\n## Compiling on Windows\r\n\r\nTo compile PoziConnect into a Windows binary for public release, perform the\r\nsteps in the previous section, then run `build.bat`.\r\n\r\nA full release of PoziConnect will be output to the `dist` directory. It should\r\ncontain `PoziConnect.exe`, additional DLLs, GDAL (from `vendor\\*gdal*`), and\r\nruntime directories and configuration taken from the top level of this repository.\r\n\r\n#### To build with an alternate logo:\r\n\r\n1.  Transform the desired image file into a base64 string.\r\n2.  Put that string in: `app/PoziConnect/gui/PlaceLabBanner.py`,\r\n    in the imageBase64 variable (within triple double quotes).\r\n3.  Perform the build as usual.\r\n\r\n#### Other notes:\r\n\r\n* Additional logging can be activated by setting the log level in `logger.py`\r\n* Sometimes, changes to the source code (`*.py`) are not correctly reflected in\r\n  the corresponding compiled code (`*.pyc`). Delete the `*.pyc` files to force their\r\n  regeneration.\r\n\r\n\r\n## Running on Mac/UNIX\r\n\r\nIt is good practice to use `virtualenv` to isolate Python dependencies\r\n(as described [here](http://docs.python-guide.org/en/latest/dev/virtualenvs/)),\r\nand `pip` to install those dependencies. However, in the case of PoziConnect\r\nthis is complicated by two issues.\r\n\r\n### Special dependencies\r\n\r\n**Firstly**, PoziConnect depends on two things that are better installed as\r\noperating system packages: `GDAL` and `wxPython`.\r\n\r\nWhen `GDAL` is installed with its Python components, it provides Python\r\nlangugage bindings, but also many extra command line tools. PoziConnect\r\nuses GDAL via the command line (not via Python bindings). Install it\r\non Mac using [homebrew](https://github.com/mxcl/homebrew):\r\n\r\n    brew update && brew install gdal --with-postgres --with-postgresql\r\n\r\nAfter this, the output of `ogrinfo --formats` should include\r\n`-> \"PostgreSQL\" (read/write)`.\r\n\r\nThe `wxPython` module integrates with operating system GUI components\r\nand is generally not installed via `pip`. Install it on Mac as described\r\n[here](http://stackoverflow.com/questions/9205317/how-do-i-install-wxpython-on-mac-os-x),\r\nwith:\r\n\r\n    brew update && brew install wxmac\r\n\r\nThe `requirements.txt` file records module versions known to work together.\r\n\r\nThe remaining, normal python module dependency is `pyodbc`. At this point you\r\ncan [create a virtualenv](http://docs.python-guide.org/en/latest/dev/virtualenvs/),\r\nthen install the recommended `pyodbc` into it:\r\n\r\n    pip install `grep pyodbc requirements.txt`\r\n\r\nThe output of `pip freeze` should now be very similar to `requirements.txt`.\r\n\r\n### Virtualenv ain't framework\r\n\r\n**Secondly**, as you will see if you attempt to run PoziConnect from within the\r\nvirtualenv, `wxPython` needs to be run from a framework build of Python in\r\norder to access the screen. The Python in the virtualenv is not a proper\r\nframework Python (even when created from your system's famework Python).\r\nThis issue is discussed [in the `wxPython` documentation](http://wiki.wxpython.org/wxPythonVirtualenvOnMac).\r\n\r\nThe solution is to run PoziConnect from your system Python, but give it access\r\nto the modules in the virtualenv. This access can be set up after Python is\r\nstarted, as described [in the virtualenv documentation](http://www.virtualenv.org/en/latest/#using-virtualenv-without-bin-python).\r\n\r\nIf the environment variable `POZICONNECT_ACTIVATE_THIS` is set to the full\r\npath of a `bin/activate_this.py` file in a virtualenv, PoziConnect will perform\r\n`execfile` on it to gain access to that virtualenv's modules.\r\n\r\nYou can set the `POZICONNECT_ACTIVATE_THIS` variable using a tool like\r\n[autoenv](https://github.com/kennethreitz/autoenv).\r\n\r\n### Run it\r\n\r\nWith this done, run `deactivate` to leave your virtualenv and return to\r\nyour system's Python, then launch PoziConnect using the `PoziConnect.sh` bash\r\nscript.\r\n\r\n### Other notes\r\n\r\n* Running with setuptools 0.7.5 installed triggered the error\r\n  `AttributeError: ResourceManager instance has no attribute '_warn_unsafe_extraction'`.\r\n  Upgrading to setuptools 1.1 fixed the problem. Check your version of setuptools\r\n  with `which easy_install | xargs cat`.\r\n\r\n\r\n## Modes of execution\r\n\r\nPoziConnect can be executed in several modes:\r\n\r\n* __Interactive mode__:\r\n  is entered when PoziConnect is launched without command-line parameters.\r\n  It is used for running tasks ad hoc.\r\n\r\n* __Silent mode__:\r\n  is entered when PoziConnect launched with the `--recipe` command-line\r\n  paramater (see below). This is used to run multiple tasks unattended\r\n  (i.e. nightly, scheduled processing).\r\n\r\n\r\n## Layout\r\n\r\n- `app`: source code of the PoziConnect application\r\n- `vendor`: place external dependencies here for Windows (Python, GDAL)\r\n- `tasks`: contains the task INI files\r\n- `recipes`: contains recipes (text files listing successive tasks)\r\n- `PoziConnect.ini`: sets some environment variables\r\n- `PoziConnect.bat`: a wrapper to run from source on Windows\r\n- `PoziConnect.sh`: a wrapper to run from source on Mac/UNIX\r\n\r\n\r\n## Using recipes\r\n\r\nRecipes are executed using the `--recipe` flag, for example:\r\n\r\n    PoziConnect.bat --recipe=recipes/example_01.txt\r\n\r\nWhere `recipies/example_01.txt` is a text file with a list of tasks to run\r\n(tasks are found in the `tasks` directory).\r\n\r\n\r\n## TODO\r\n\r\n* Finish renaming PlaceLab to PoziConnect in the entire codebase.\r\n\r\n\r\n## Copyright\r\n\r\nGroundtruth &copy; 2009-2013\r\n","google":"UA-27881682-7","note":"Don't delete this file! It's used internally to help with page regeneration."}